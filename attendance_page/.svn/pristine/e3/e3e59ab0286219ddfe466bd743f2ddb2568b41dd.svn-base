<template>
    <div>
        <el-form :inline="true" :model="formInline" class="demo-form-inline" ref="formInline">
            <el-form-item label="用户名" prop="username">
                <el-input size="mini" v-model="formInline.username" placeholder="用户名"></el-input>
            </el-form-item>
            <el-form-item label="真实姓名" prop="realname">
                <el-input size="mini" v-model="formInline.realname" placeholder="真实姓名"></el-input>
            </el-form-item>
            <el-form-item>
                <el-button size="mini" type="primary" icon="search" @click="onSearch('formInline')">查询</el-button>
                <el-button size="mini" type="info" @click="resetForm('formInline')"><icon name="refresh" class="custom-icon"></icon>重置</el-button>
                <el-button size="mini" type="success" icon="plus" @click="handleAdd">新增</el-button>
                <el-button size="mini" type="success" icon="plus" @click="handleBindUser">添加已有用户</el-button>
            </el-form-item>
        </el-form>
        <!--表单-->
        <el-table
            :data="sysUserTableData"
            border
            :height="this.$store.state.gTableHeight" 
            v-loading="isloading"
            style="width: 100%">
            </el-table-column>
            <el-table-column
                prop="username"
                label="用户名"
            >
            </el-table-column>
            <el-table-column 
                min-width="120"
                prop="realname"
                label="真实姓名">
            </el-table-column>
            <el-table-column 
                min-width="120"
                prop="departname"
                label="组织机构">
            </el-table-column>
            <el-table-column 
                prop="status" 
                :formatter="statusFormatFun"
                label="状态">
            </el-table-column>
            <el-table-column label="操作" width="200">
                <template scope="scope">
                    <el-button
                        size="mini" 
                        type="primary"
                        @click="handleEdit(scope.$index, scope.row)">编辑
                    </el-button>
                    <el-button
                        size="mini"
                        type="warning"
                        @click="handleUnbund(scope.$index, scope.row)">解绑
                    </el-button>
                    <el-button
                        size="mini"
                        type="danger"
                        @click="handleDelete(scope.$index, scope.row)">删除
                    </el-button>
                </template>
            </el-table-column>
        </el-table>
        <paging @emitsizechange="handleSizeChange"
                @emitcurrentchange="handleCurrentChange"
                :currentPage="tabPage.currentPage"
                :pageSizes="tabPage.pageSizes"
                :pageSize="tabPage.pageSize"
                :total="tabPage.totalNum">
        </paging>
       
        <!--dialog-->
        <el-dialog v-bind:title="formTitle" v-model="dialogInfo" :close-on-click-modal="false" v-on:close="resetForm('ruleForm')" size="tiny">
            <el-form :model="ruleForm" :rules="rules" ref="ruleForm" label-width="100px">
                <el-form-item label="用户名" prop="username">
                    <el-input size="small" v-model="ruleForm.username" :disabled="!(!ruleForm.id)"></el-input>
                </el-form-item>
                <el-form-item label="密码" prop="password">
                    <el-input size="small" v-model="ruleForm.password" type="password"></el-input>
                </el-form-item>
                <el-form-item label="确认密码" prop="checkPass">
                    <el-input size="small" v-model="ruleForm.checkPass" type="password"></el-input>
                </el-form-item>
                <el-form-item label="真实姓名" prop="realname">
                    <el-input size="small" v-model="ruleForm.realname"></el-input>
                </el-form-item>
                <el-form-item label="所属部门" prop="departid">
                    <el-select size="small" v-model="ruleForm.departid" placeholder="请选择">
                        <el-option
                            v-for="(item ,index) in options"
                            :label="item.departname + ' ('+item.org_code+')'"
                            :value="item.id"
                            :key="index">
                        </el-option>
                    </el-select>
                </el-form-item>
                <el-form-item label="性别" prop="gender">
                    <el-select size="small" v-model="ruleForm.gender" placeholder="请选择">
                        <el-option
                            v-for="(item ,index) in sex"
                            :label="item.typename"
                            :value="item.typename"
                            :key="index">
                        </el-option>
                    </el-select>
                </el-form-item>
                <el-form-item label="手机号码" prop="phone">
                    <el-input size="small" v-model="ruleForm.phone"></el-input>
                </el-form-item>
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button size="mini" @click="dialogInfo=false">取 消</el-button>
                <el-button size="mini" type="primary" @click="submitForm('ruleForm')">确 定</el-button>
            </div>
        </el-dialog>
      
        <user-dialog :userDialog="userDialog" :roleid="roleid" @close="closUserDialog"></user-dialog>
        <router-view></router-view>
    </div>
</template>

<script>
    import paging from '../../common/Paging.vue'
    import userDialog from './userDialog.vue'
    export default {
        data(){
            var validatePass2 = (rule, value, callback) => {
                if (value === '') {
                    callback(new Error('请再次输入密码'));
                } else if (value !== this.ruleForm.password) {
                    callback(new Error('两次输入密码不一致!'));
                } else {
                    callback();
                }
            };
        
            var isMobilePhone = (rule, value, callback) => {
                var reg =  /^1[34578]\d{9}$/;//手机号码
                if(!value){
                    callback(new Error('请输入手机号码'));
                }
                setTimeout(() => {
                    if (!reg.test(value)) {
                    callback(new Error('请输入正确格式，如：18723346175'));
                } else {
                    callback();
                }
            }, 300);
            };
            return {
                sysUserTableData: [],//用户列表数组
                tabPage: {
                    currentPage: 1,
                    pageSize: 10,
                    pageSizes: [10, 20, 30, 50]
                },//分页信息
                formInline: {//查询表单对象
                    username: '',
                    realname:''
                },
                dialogInfo: false,//模态框是否显示标识
                ruleForm: {},//新增表单数据
                options: [],//部门数组
                rules: {
                    username: [
                        {required: true, message: '请输入用户名', trigger: 'blur'}
                    ],
                    password: [
                        {required: true, message: '请输入密码', trigger: 'blur'}
                    ],
                    realname: [
                        {required: true, message: '请输入真实姓名', trigger: 'blur'}
                    ],
                    phone:[
                        {required: true, validator:isMobilePhone, trigger: 'blur'}
                    ],
                    gender:[
                        {required: true, message: '请选择性别', trigger: 'change'}
                    ],
                    checkPass: [
                        {validator: validatePass2, trigger: 'blur'}
                    ]
                },
                qxdj: [],//权限等级数组
                loginUser:'',//记录登录用户
                formTitle: '',//新增编辑模态框title
                isUser:false,//判断是否为当前用户
                userPsd:'',//获取当前用户密码

                defaultProps: {
                    children: 'children',
                    label: 'rolename'
                },
                userid:'',//选中用户id
                userDialog:false,//绑定已有用户弹窗
                sex:[],//性别下拉
            }
        },
        props: ['roleid','isloading'],
        created: function () {

        },
        mounted: function () {
            this.getUserListByRole();
            this.getsysDepartName();
            this.loginUser = document.cookie.split('username=')[1];//获取当前用户名
            this.sex = this.getDicData('sex');
        },
        components: {
            paging,userDialog
        },
        computed: {},
        watch:{
            roleid:function(){
                this.formInline = {username:'',realname:''};
                this.getUserListByRole();
            },
            isloading:function(){
                if(this.isloading){
                    setTimeout(() => {
                        this.$emit('changeList',false);
                    }, 500);
                }
              
            }
        },
        methods: {
            getDicData(str){//获取数据字典相关内容
                var dicList = JSON.parse(this.$getStore("gDictionaryList"))
                var filterarray = $.grep(dicList, function (value) {
                    return value.typegroupcode === str;//筛选出其中一个，仍为一个数组
                });
                if (filterarray.length > 0) {//防止前端报错
                    return filterarray[0].typeList;
                }
            },
            statusFormatFun(row, colum){//用户状态格式化
                if (row[colum.property] != null) {
                    var d = row[colum.property];
                    return d == '1' ? "激活" : d == '0' ? "锁定"  : "未知";

                    
                }
            },
            getUserListByRole(params){
                var data = {
                    page: this.tabPage.currentPage,
                    pageSize: this.tabPage.pageSize,
                    options:this.formInline,
                    roleid:this.roleid
                };
                if (params) {
                    data = params;
                }
                var _self = this;
                this.$http.get('/system/user/getusersbyrole', {params: data})
                    .then(function (res) {
                        if (res.data && res.data.success) {
                            var d = res.data.result;
                            _self.sysUserTableData = d.rows;
                            _self.tabPage.totalNum = d.count;
                        }
                    }).catch(function (error) {
                    console.log(error);
                    _self.$message({
                        message: '获取失败',
                        type: 'warning'
                    });
                });
            },
            /**
             * 查询部门列表
             */
            getsysDepartName(){
                var _self = this;
                this.$http.get('/system/depart/getsysdepartname').then(function (res) {
                    if (res.data && res.data.flag) {
                        var arr = res.data.data;
                        _self.options = arr;
                    }
                }).catch(function (err) {
                    console.log(err);
                })
            },
            /**
             * 查询 根据用户名模糊查询
             * @params {String} formName 进行验证
             */
            onSearch(formName){
                var params = {options:this.formInline};
                params.roleid = this.roleid;
                params.page = 1;
                params.pageSize = this.tabPage.pageSize;
                this.tabPage.currentPage =1;//每次查询默认第一页
                var _self = this;
                _self.$refs[formName].validate((valid) => {
                    if (valid) {
                        _self.getUserListByRole(params);
                    } else {
                        console.log('提交错误');
                return false;
            }
            });
            },
            /**
             * 点击新增按钮
             */
            handleAdd(){
                this.dialogInfo = true;
                this.formTitle = "新增用户信息";
                this.ruleForm = Object.assign({}, {
                    username:'',
                    password:'',
                    checkPass:'',
                    realname:'',
                    phone:'',
                    gender:'',
                    departid:undefined
                });
            },
            /**
             * 保存用户信息
             * @params {String} formName 用于验证
             */
            submitForm(formName){
                var _self = this;
                var params = _self.ruleForm;
                params.roleid = this.roleid;
                this.$refs[formName].validate(function (valid) {
                    if (valid) {
                        _self.$http.post('/system/user/savesysuserinfo', params)
                            .then(function (res) {
                                if (res.data && res.data.success) {
                                    _self.dialogInfo = false;
                                    if(_self.isUser&&(_self.userPsd!=_self.ruleForm.password)){
                                        var date = new Date();
                                        date.setTime(date.getTime() - 10000);
                                        document.cookie = "islogin=true; expires=" + date.toGMTString();
                                        _self.$router.push('/login');//返回登录页
                                    }else{
                                        _self.getUserListByRole();
                                        _self.$message({
                                            message: res.data.msg,
                                            type: 'success'
                                        });
                                    }
                                } else {
                                    _self.$message({
                                        message: res.data.msg,
                                        type: 'error'
                                    });
                                }

                            })
                            .catch(function (error) {
                                _self.$message({
                                    message: '请求错误',
                                    type: 'error'
                                });
                                console.log(error);
                            });

                    } else {
                        console.log('提交错误');
                        return false;
                    }
                });
            },
            /**
             * 表单重置
             * @params {Object} formName 表单名称
             */
            resetForm(formName){
                this.$refs[formName].resetFields();
                if(formName=='formInline'){
                    this.getUserListByRole()
                }
               
            },
            /**
             * 编辑按钮点击事件
             * @params {Number} index  行号
             * @params {Object} row 行对象
             */
            handleEdit(index, row) {
                this.dialogInfo = true;
                this.formTitle = "编辑用户信息";
                this.ruleForm = Object.assign({}, row);
                if (row.ws_sys_depart === null) {
                    this.ruleForm.departid = undefined;
                }
                if(row.username ===this.loginUser){
                    this.isUser = true;
                    this.userPsd = row.password;
                }else{
                    this.isUser = false;
                }
            },
            /**
             * 删除按钮点击事件
             * @params {Number} index   行号
             * @params {Object} row     行对象
             */
            handleDelete(index, row) {
                var _self = this;
                _self.deleteSysUserInfo(row);
            },
            /**
             * 删除部门信息
             * @params {Object} row|rows     行对象
             */
            deleteSysUserInfo(data){
                var _self = this;
                this.$confirm('此操作将永久删除选择用户信息, 是否继续?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    _self.$http.post('/system/user/delsysuserinfo', data).then(function (res) {
                    if (res.data && res.data.flag) {
                        _self.getUserListByRole();
                        _self.$message({
                            message: '删除成功',
                            type: 'success'
                        });
                    }else{
                        _self.$message({
                            message: res.data.msg,
                            type: 'error'
                        });
                    }
                }).catch(function (err) {
                    console.log(err);
                })
            }).catch(() => {

                });
            },
            /**
             * 切换每页条数
             * @params {Number} val 每页条数
             */
            handleSizeChange(val) {
                this.tabPage.pageSize = val;
                this.getUserListByRole();
            },
            /**
             * 切换页码
             * @params {Number} val 页码
             */
            handleCurrentChange(val) {
                this.tabPage.currentPage = val;
                this.getUserListByRole();
            },
            handleBindUser(){
                this.userDialog = true;
            },
            closUserDialog(d){
                this.userDialog = d.dialog;
                if(d.status){
                    this.getUserListByRole();
                }
            },
            handleUnbund(index,row){
                var params = {roleid:this.roleid,userid:row.id};
                var _self = this;
                this.$http.post('system/user/deluserrole',params).then(res =>{
                    if(res.data&&res.data.success){
                        this.getUserListByRole();
                        _self.$message({
                            message: res.data.msg,
                            type: 'success'
                        });
                    }else{
                        _self.$message({
                            message: res.data.msg,
                            type: 'warning'
                        });
                    }
                }).catch(err =>{

                })
            }

        }
    }
</script>

<style scoped>
    @media (min-width: 1200px){
        .el-input--mini{
            width:100%;
        }
    }
    @media (min-width: 992px) and (max-width:1200px){
        .el-input--mini{
            width:120px;
        }
        .el-form-item__label{
            font-size:12px
        }
    }
    @media (max-width: 992px){
        .el-input {
            width: 100%;
        }
        .el-form-item__label{
            font-size:14px
        }
        .rightTitle{
            position: relative;
            top:2px;
            font-size: 14px
        }
    }

</style>
